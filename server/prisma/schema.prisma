// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ChatRoom {
  id        String      @id @default(uuid())
  userIds   String      @db.Text
  name      String      @default("")
  chat_Line Chat_Line[]
}

model User {
  id           String         @id @default(uuid())
  name         String
  email        String         @unique()
  password     String
  chat_Line    Chat_Line[]
  Collaborator Collaborator[]
  Friend       Friend[]
  Approval     Approval[]
  Report       Report[]
}

model Chat_Line {
  id       String   @id @default(uuid())
  sendTime DateTime @default(now())
  chatRoom ChatRoom @relation(fields: [chatId], references: [id])
  chatId   String
  user     User     @relation(fields: [userId], references: [id])
  userId   String
}

model Friend {
  user        User   @relation(fields: [userId], references: [id])
  userId      String @id
  friend_list String
}

model Message {
  id         String @id @default(uuid())
  message    String // 此条消息的内容
  state      String @default("pending") // pending | agree | reject
  sendUserId String
  recvUserId String
}

model Approval {
  id        String   @id @default(uuid())
  type      String // -1表示加班，0表示外出，1后面的表示请假（年假、事假等）
  state     String   @default("pending") // agree、reject、pending
  startTime DateTime @default(now())
  endTime   DateTime @default(now())
  reason    String   @db.Text
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Report {
  id          String   @id @default(uuid())
  title       String
  type        String // 0表示日报、1表示周报、2表示月报
  curReport   String   @db.Text
  prevReport  String   @db.Text
  otherReport String   @db.Text
  sendTime    DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

model CloudFile {
  id            String         @id @default(uuid())
  label         String
  type          String         @default("file") // file 表示文件，folder表示文件夹
  updateTime    DateTime       @default(now())
  parentId      String // 0表示根目录
  CloudDocument CloudDocument?
}

model CloudDocument {
  id           String        @id @default(uuid())
  title        String
  text         String        @db.Text
  cloudFile    CloudFile     @relation(fields: [cloudFileId], references: [id])
  cloudFileId  String        @unique
  Collaborator Collaborator?
}

// 协作者
model Collaborator {
  cloudDocument   CloudDocument @relation(fields: [cloudDocumentId], references: [id])
  cloudDocumentId String        @id
  user            User          @relation(fields: [userId], references: [id])
  userId          String
}

model Calendar {
  id        String   @id @default(uuid())
  title     String
  startTime DateTime @default(now())
  endTime   DateTime @default(now())
  desc      String   @db.Text
}
